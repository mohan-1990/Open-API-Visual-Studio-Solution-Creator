using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using @ProjectName_UnderscoreSeperated@.Database;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using @ProjectName_UnderscoreSeperated@.Models;

namespace @ProjectName_UnderscoreSeperated@.Controllers
{
    [ApiController]
    [Route("@BaseURL@")]
    public class @ControllerName@Controller : ControllerBase
    {
        private readonly ILogger<@ControllerName@Controller> _logger;
        private @SolutionName_WhiteSpaceRemoved@Context _@SolutionName_WhiteSpaceRemoved_FirstLetterLowerCase@Context;
        private readonly IConfiguration _appConfiguration;

        public @ControllerName@Controller(ILogger<@ControllerName@Controller> logger, @SolutionName_WhiteSpaceRemoved@Context @SolutionName_WhiteSpaceRemoved_FirstLetterLowerCase@Context, IConfiguration appConfiguration)
        {
            _logger = logger;
            _@SolutionName_WhiteSpaceRemoved_FirstLetterLowerCase@Context = @SolutionName_WhiteSpaceRemoved_FirstLetterLowerCase@Context;
            _appConfiguration = appConfiguration;
        }
		
		[Route("health")]
        [HttpGet]
        public IActionResult health()
        {
            bool dbConnection = _@SolutionName_WhiteSpaceRemoved_FirstLetterLowerCase@Context.Database.CanConnect();
            return dbConnection ? StatusCode(200, "Ok") : StatusCode(200, "Probably not ok");
        }
    }
}
